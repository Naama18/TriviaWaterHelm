apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-server # Name of the deployment
  labels:
    app: server-app
spec:
  replicas: {{ .Values.server.replicaCount }} # Set the number of replicas based on values.yaml
  selector:
    matchLabels:
      app: server-app
  strategy:
    type: RollingUpdate # Rolling update strategy
    rollingUpdate:
      maxSurge: 1 # Max number of Pods to be created over the desired replicas
      maxUnavailable: 1 # Max number of Pods that can be unavailable during the update
  template:
    metadata:
      labels:
        app: deployment-server
    spec:
      containers:
        - name: server # Container name
          imagePullPolicy: {{ .Values.server.image.pullPolicy }} # Image pull policy
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}" # Image from values.yaml
          ports:
            - containerPort: {{ .Values.server.port }}
          env: 
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: secret-db
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secret-db
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: configmap-db
                  key: DB_NAME
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: configmap-db
                  key: DB_HOST
          resources:
            requests:
              memory: "{{ .Values.default.resources.requests.memory }}"
              cpu: "{{ .Values.default.resources.requests.cpu }}"
            limits:
              memory: "{{ .Values.default.resources.limits.memory }}"
              cpu: "{{ .Values.default.resources.limits.cpu }}"
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.server.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 4
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: {{ .Values.server.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: {{ .Values.server.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 7
            failureThreshold: 10
